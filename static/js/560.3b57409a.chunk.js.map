{"version":3,"file":"static/js/560.3b57409a.chunk.js","mappings":"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","sources":["components/MoviesList/MovieList.styled.jsx","components/MoviesList/MoviesList.jsx","helpers/api.js","components/Search/Search.styled.jsx","components/Search/Search.jsx","components/SearchBg/SearchBg.styled.jsx","components/SearchBg/SearchBg.jsx","components/NoVideo/NoVideo.styled.jsx","components/NoVideo/NoVideo.jsx","pages/Movie.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nconst List = styled.ul`\n  display: flex;\n  /* flex-direction: column; */\n  flex-wrap: wrap;\n  gap: 20px;\n  list-style: none;\n  padding: 0;\n  justify-content: center;\n`;\n\nconst MovieItem = styled.li`\n  position: relative;\n  width: 150px;\n  border-radius: 5px;\n  box-shadow: 0 2px 7px #332f2f;\n`;\n\nconst MovieItemWrapper = styled.div`\n  overflow: hidden;\n  position: relative;\n`;\n\nconst MovieLink = styled(Link)`\n  font-size: 18px;\n  text-decoration: none;\n  width: 150px;\n  color: var(--primary-bg);\n  &:hover,\n  &:focus {\n    /* font-size: 20px; */\n    color: var(--accent);\n    color: var(--primary-bg);\n    /* letter-spacing: 0.5px; */\n  }\n\n  &:hover div,\n  &:focus div {\n    transform: translateY(0);\n    opacity: 1;\n  }\n`;\n\nconst MovieTitleWrapper = styled.div`\n  /* word-wrap: break-word; */\n  /* text-overflow: ellipsis; */\n  /* white-space: nowrap; */\n  overflow: hidden;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--accent);\n  padding: 5px;\n  height: 40%;\n  transform: translateY(30%);\n  opacity: 0;\n  /* background-color: $primary-accent-color; */\n  transition: transform 250ms ease-in-out, opacity 250ms ease-in-out;\n  text-align: center;\n  /* padding: 26px 0; */\n  /* text-transform: uppercase; */\n`;\n\nconst MovieTitle = styled.p`\n  display: inline-block;\n  /* height: 50px; */\n  /* white-space: nowrap; */\n  word-wrap: break-word;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  /* height: 100%; */\n  line-height: 1em;\n  max-height: 3em;\n  overflow: hidden;\n  text-shadow: 0 0 2px black;\n`;\n\nconst Average = styled.div`\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: black;\n  font-size: 14px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  border: 2px solid var(--accent);\n  z-index: 10;\n\n  & span {\n    font-size: 8px;\n  }\n`;\n\nexport {\n  List,\n  MovieItem,\n  MovieItemWrapper,\n  MovieLink,\n  MovieTitleWrapper,\n  MovieTitle,\n  Average,\n};\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Average,\n  List,\n  MovieItem,\n  MovieItemWrapper,\n  MovieLink,\n  MovieTitle,\n  MovieTitleWrapper,\n} from './MovieList.styled';\nimport what from '../../images/what.jpg';\n\nfunction MoviesList({ movies }) {\n  // console.log(movies);\n  const location = useLocation();\n  // console.log(movies);\n  const dateToYear = date => {\n    return new Date(date).getFullYear();\n  };\n  // const date = new Date(release_date).getFullYear();\n  // const bestMovie = movies[0];\n  // const restMovies = [...movies.slice(1)];\n  // console.log(bestMovie);\n  // console.log(restMovies);\n\n  return (\n    <>\n      <List>\n        {movies.map(\n          ({ id, title, poster_path, release_date, vote_average }) =>\n            title && (\n              <MovieItem key={id}>\n                <Average>\n                  <p>\n                    {Math.round(vote_average * 10)}\n                    <span>%</span>\n                  </p>\n                </Average>\n                <MovieItemWrapper>\n                  <MovieLink\n                    key={id}\n                    to={`/movies/${id}`}\n                    state={{ from: location }}\n                  >\n                    <img\n                      // src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                      src={\n                        poster_path\n                          ? 'https://image.tmdb.org/t/p/w300' + poster_path\n                          : what\n                      }\n                      alt={title}\n                      width={150}\n                      height={225}\n                    />\n                    <MovieTitleWrapper>\n                      <MovieTitle>{title}</MovieTitle>\n                      {release_date && (\n                        <MovieTitle>{dateToYear(release_date)}</MovieTitle>\n                      )}\n                    </MovieTitleWrapper>\n                  </MovieLink>\n                </MovieItemWrapper>\n              </MovieItem>\n            )\n        )}\n      </List>\n    </>\n  );\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNWIwYzYzN2RhYzFmZmFlMThjZDRmYmRjMjc1ZWFhOSIsInN1YiI6IjY0OTVjMzgzZDVmZmNiMDBlMjA1NzIzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.x9lPMVl4nfFlN901y3yy6-AcoB6SAlcKg0T-FQPITKg',\n  },\n};\n\nasync function fetchTrendingMovies() {\n  const response = await axios.get('/trending/all/day?language=en-US', options);\n  return response.data.results;\n}\n\nasync function fetchMovieSearch(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&language=en-US`,\n    options\n  );\n  return response.data.results;\n}\n\nasync function fetchMovieDetails(id) {\n  const response = await axios.get(`/movie/${id}?language=en-US`, options);\n  return response.data;\n}\n\nasync function fetchAddition(id, param) {\n  const response = await axios.get(\n    `movie/${id}/${param}?language=en-US`,\n    options\n  );\n  return response.data;\n}\n\nasync function fetchGenre() {\n  const response = await axios.get(`genre/movie/list`, options);\n  return response.data;\n}\n\nasync function fetchByGenres(genre) {\n  const response = await axios.get(\n    `discover/movie?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc&with_genres=${genre}`,\n    options\n  );\n  return response.data;\n  // .request(options)\n  // .then(function (response) {\n  //   console.log(response.data);\n  // })\n  // .catch(function (error) {\n  //   console.error(error);\n  // });\n}\n\n// /discover/movie?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc&with_genres=Action\nexport {\n  fetchTrendingMovies,\n  fetchMovieSearch,\n  fetchMovieDetails,\n  fetchAddition,\n  fetchGenre,\n  fetchByGenres,\n};\n","import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  padding-top: 20px;\n`;\n\nconst Input = styled.input`\n  /* margin-right: 10px; */\n  width: 250px;\n`;\n\nconst Button = styled.button`\n  padding: 5px;\n  border: 1px solid #978a8a;\n  border-radius: 2px;\n\n  &:hover,\n  &:focus {\n    background-color: #c25151;\n\n    color: #fff;\n    cursor: pointer;\n  }\n`;\n\nexport { Form, Input, Button };\n","import PropTypes from 'prop-types';\nimport { Form, Input, Button } from './Search.styled';\n\nfunction Search({ onSubmit }) {\n  let queryValue = '';\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    queryValue = form.elements.query.value;\n    onSubmit(queryValue);\n    form.reset();\n  };\n\n  return (\n    <>\n      <Form action=\"\" onSubmit={handleSubmit}>\n        <Input type=\"text\" name=\"query\" defaultValue={queryValue} />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n    </>\n  );\n}\n\nSearch.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default Search;\n","import styled from '@emotion/styled';\n\nconst Wrapper = styled.div``;\n\nconst Bg = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100%;\n  min-height: 100vh;\n  z-index: -1;\n  opacity: 0.3;\n  background-image: url(${props => props.bg});\n  /* background-color: var(--accent); */\n  /* background-color: #fbda61;\n  background-image: linear-gradient(45deg, #fbda61 0%, #ff5acd 100%); */\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  /* filter: blur(5px); */\n  backdrop-filter: blur(200px);\n  backdrop-filter: opacity(20%);\n`;\n\nexport { Wrapper, Bg };\n","// import theater from '../../images/theater.png';\nimport fon from '../../images/fon.webp';\nimport { Bg } from './SearchBg.styled';\n\nfunction SearchBg() {\n  return (\n    // <Wrapper>\n\n    <Bg\n      bg={fon}\n      // alt={movie.title}\n      //   width={`100%`}\n    />\n  );\n  //   {children}\n  // </Wrapper>\n}\n\nexport default SearchBg;\n","const { default: styled } = require('@emotion/styled');\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n  justify-content: center;\n`;\n\nconst Text = styled.p`\n  font-size: 24px;\n  font-weight: bold;\n`;\n\nexport { Wrapper, Text };\n","import { motion } from 'framer-motion';\nimport spiderman from '../../images/spiderman.webp';\nimport { Text, Wrapper } from './NoVideo.styled';\n\nfunction NoVideo() {\n  return (\n    <Wrapper>\n      <motion.div\n        initial={{ opacity: 0, x: 100, overflow: 'hidden' }}\n        whileInView={{ opacity: 1, x: 0 }}\n        transition={{ duration: 1.15 }}\n        viewport={{ once: true }}\n      >\n        <Text>Enter a search query to explore movies.</Text>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 0, overflow: 'hidden' }}\n        whileInView={{ opacity: 1, y: 100 }}\n        transition={{ duration: 1.15 }}\n        viewport={{ once: true }}\n        // , amount: 0.2\n      >\n        <img src={spiderman} alt=\"spiderman\" width={500} />\n      </motion.div>\n    </Wrapper>\n  );\n}\n\nexport default NoVideo;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Search from 'components/Search/Search';\nimport { fetchMovieSearch } from 'helpers/api';\nimport SearchBg from 'components/SearchBg/SearchBg';\nimport NoVideo from 'components/NoVideo/NoVideo';\n// import GenresList from 'components/GenresList/GenresList';\n\n// import kino from '../images/kino.png';\n// import films from '../images/films.webp';\n\nfunction Movie() {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const handleSubmit = value => {\n    setSearchParams({ query: value });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n    fetchMovieSearch(query).then(res => {\n      const allMovies = res.filter(m => m.title);\n      setMovies([...allMovies]);\n    });\n    // console.log(movies);\n  }, [query]);\n\n  // useEffect(() => {\n  //   fetchGenre().then(res => {\n  //     console.log(res);\n  //   });\n  // }, []);\n\n  return (\n    <div>\n      <SearchBg />\n      <Search location={location} onSubmit={handleSubmit} />\n      {/* <GenresList /> */}\n      {movies.length === 0 ? <NoVideo /> : <MoviesList movies={movies} />}\n    </div>\n  );\n}\n\nexport default Movie;\n"],"names":["List","styled","MovieItem","MovieItemWrapper","MovieLink","Link","MovieTitleWrapper","MovieTitle","Average","movies","location","useLocation","map","date","id","title","poster_path","release_date","vote_average","Math","round","to","state","from","src","what","alt","width","height","Date","getFullYear","axios","options","method","headers","accept","Authorization","fetchTrendingMovies","response","data","results","fetchMovieSearch","query","fetchMovieDetails","fetchAddition","param","Form","Input","Button","onSubmit","queryValue","action","evt","preventDefault","form","currentTarget","elements","value","reset","type","name","defaultValue","Bg","props","bg","fon","require","default","Wrapper","div","Text","p","motion","initial","opacity","x","overflow","whileInView","transition","duration","viewport","once","y","spiderman","useState","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","then","res","allMovies","filter","m","length","MoviesList"],"sourceRoot":""}