{"version":3,"file":"static/js/971.96f5dd6b.chunk.js","mappings":"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","sources":["components/MoviesList/MovieList.styled.jsx","components/MoviesList/MoviesList.jsx","helpers/api.js","components/Search/Search.styled.jsx","components/Search/Search.jsx","pages/Movie.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nconst List = styled.ul`\n  display: flex;\n  /* flex-direction: column; */\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style: none;\n  padding: 0;\n  justify-content: center;\n`;\n\nconst MovieItem = styled.li`\n  position: relative;\n  width: 150px;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0 2px 7px #332f2f;\n`;\nconst MovieLink = styled(Link)`\n  font-size: 18px;\n  text-decoration: none;\n  width: 150px;\n  color: var(--primary-bg);\n  &:hover,\n  &:focus {\n    /* font-size: 20px; */\n    color: var(--accent);\n    color: var(--primary-bg);\n    /* letter-spacing: 0.5px; */\n  }\n\n  &:hover div,\n  &:focus div {\n    transform: translateY(0);\n    opacity: 1;\n  }\n`;\n\nconst MovieTitleWrapper = styled.div`\n  /* word-wrap: break-word; */\n  /* text-overflow: ellipsis; */\n  /* white-space: nowrap; */\n  overflow: hidden;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--accent);\n  padding: 5px;\n  height: 40%;\n  transform: translateY(30%);\n  opacity: 0;\n  /* background-color: $primary-accent-color; */\n  transition: transform 250ms ease-in-out, opacity 250ms ease-in-out;\n  text-align: center;\n  /* padding: 26px 0; */\n  /* text-transform: uppercase; */\n`;\n\nconst MovieTitle = styled.p`\n  display: inline-block;\n  /* height: 50px; */\n  /* white-space: nowrap; */\n  word-wrap: break-word;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  /* height: 100%; */\n  max-height: 3em; /* Встановлюємо максимальну висоту на три рядки */\n  line-height: 1em;\n  /* Встановлюємо висоту лінії тексту на один рядок */\n  overflow: hidden;\n`;\n\n// .card-overlay {\n\n// }\n\n// .category-books__link:hover .card-overlay {\n//     transform: translateY(0);\n//     opacity: 1;\n// }\n\n// const Poster = styled.img``;\nexport { List, MovieItem, MovieLink, MovieTitleWrapper, MovieTitle };\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  List,\n  MovieItem,\n  MovieLink,\n  MovieTitle,\n  MovieTitleWrapper,\n} from './MovieList.styled';\nimport what from '../../images/what.jpg';\n\nfunction MoviesList({ movies }) {\n  // console.log(movies);\n  const location = useLocation();\n\n  const dateToYear = date => {\n    return new Date(date).getFullYear();\n  };\n  // const date = new Date(release_date).getFullYear();\n  // const bestMovie = movies[0];\n  // const restMovies = [...movies.slice(1)];\n  // console.log(bestMovie);\n  // console.log(restMovies);\n\n  return (\n    <>\n      <List>\n        {movies.map(\n          ({ id, title, poster_path, release_date }) =>\n            title && (\n              <MovieItem key={id}>\n                <MovieLink\n                  key={id}\n                  to={`/movies/${id}`}\n                  state={{ from: location }}\n                >\n                  <img\n                    // src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                    src={\n                      poster_path\n                        ? 'https://image.tmdb.org/t/p/w300' + poster_path\n                        : what\n                    }\n                    alt={title}\n                    width={150}\n                    height={225}\n                  />\n                  <MovieTitleWrapper>\n                    <MovieTitle>{title}</MovieTitle>\n                    {release_date && <p>{dateToYear(release_date)}</p>}\n                  </MovieTitleWrapper>\n                </MovieLink>\n              </MovieItem>\n            )\n        )}\n      </List>\n    </>\n  );\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\nexport default MoviesList;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNWIwYzYzN2RhYzFmZmFlMThjZDRmYmRjMjc1ZWFhOSIsInN1YiI6IjY0OTVjMzgzZDVmZmNiMDBlMjA1NzIzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.x9lPMVl4nfFlN901y3yy6-AcoB6SAlcKg0T-FQPITKg',\n  },\n};\n\nasync function fetchTrendingMovies() {\n  const response = await axios.get('/trending/all/day?language=en-US', options);\n  return response.data.results;\n}\n\nasync function fetchMovieSearch(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&language=en-US`,\n    options\n  );\n  return response.data.results;\n}\nasync function fetchMovieDetails(id) {\n  const response = await axios.get(`/movie/${id}?language=en-US`, options);\n  return response.data;\n}\n\nasync function fetchAddition(id, param) {\n  const response = await axios.get(\n    `movie/${id}/${param}?language=en-US`,\n    options\n  );\n  return response.data;\n}\n\nexport {\n  fetchTrendingMovies,\n  fetchMovieSearch,\n  fetchMovieDetails,\n  fetchAddition,\n};\n","import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  gap: 10px;\n  padding-top: 20px;\n`;\n\nconst Input = styled.input`\n  /* margin-right: 10px; */\n  width: 250px;\n`;\n\nconst Button = styled.button`\n  padding: 5px;\n  border: 1px solid #978a8a;\n  border-radius: 2px;\n\n  &:hover,\n  &:focus {\n    background-color: #c25151;\n\n    color: #fff;\n    cursor: pointer;\n  }\n`;\n\nexport { Form, Input, Button };\n","import PropTypes from 'prop-types';\nimport { Form, Input, Button } from './Search.styled';\n\nfunction Search({ onSubmit }) {\n  let queryValue = '';\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    queryValue = form.elements.query.value;\n    onSubmit(queryValue);\n    form.reset();\n  };\n\n  return (\n    <>\n      <Form action=\"\" onSubmit={handleSubmit}>\n        <Input type=\"text\" name=\"query\" defaultValue={queryValue} />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n    </>\n  );\n}\n\nSearch.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default Search;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Search from 'components/Search/Search';\nimport { fetchMovieSearch } from 'helpers/api';\n\nfunction Movie() {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const handleSubmit = value => {\n    setSearchParams({ query: value });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n    fetchMovieSearch(query).then(res => {\n      const allMovies = res.filter(m => m.title);\n      setMovies([...allMovies]);\n    });\n    // console.log(movies);\n  }, [query]);\n\n  return (\n    <>\n      <Search location={location} onSubmit={handleSubmit} />\n      <MoviesList movies={movies} />\n    </>\n  );\n}\n\nexport default Movie;\n"],"names":["List","styled","MovieItem","MovieLink","Link","MovieTitleWrapper","MovieTitle","movies","location","useLocation","map","date","id","title","poster_path","release_date","to","state","from","src","what","alt","width","height","Date","getFullYear","axios","options","method","headers","accept","Authorization","fetchTrendingMovies","response","data","results","fetchMovieSearch","query","fetchMovieDetails","fetchAddition","param","Form","Input","Button","onSubmit","queryValue","action","evt","preventDefault","form","currentTarget","elements","value","reset","type","name","defaultValue","useState","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","then","res","allMovies","filter","m","MoviesList"],"sourceRoot":""}