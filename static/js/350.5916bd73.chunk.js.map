{"version":3,"file":"static/js/350.5916bd73.chunk.js","mappings":"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","sources":["components/Background/Background.styled.jsx","components/MoviesList/MovieList.styled.jsx","components/MoviesList/MoviesList.jsx","helpers/api.js","components/Background/Background.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","pages/Home.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Wrapper = styled.div``;\n\nconst Bg = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100%;\n  min-height: 100vh;\n  z-index: -1;\n  opacity: 0.2;\n  background-image: url(${props => props.bg});\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  /* filter: blur(5px); */\n  backdrop-filter: blur(200px);\n  backdrop-filter: opacity(20%);\n`;\n\nexport { Wrapper, Bg };\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nconst List = styled.ul`\n  display: flex;\n  /* flex-direction: column; */\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style: none;\n  padding: 0;\n  justify-content: center;\n`;\n\nconst MovieItem = styled.li`\n  position: relative;\n  width: 150px;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0 2px 7px #332f2f;\n`;\nconst MovieLink = styled(Link)`\n  font-size: 18px;\n  text-decoration: none;\n  width: 150px;\n  color: var(--primary-bg);\n  &:hover,\n  &:focus {\n    /* font-size: 20px; */\n    color: var(--accent);\n    color: var(--primary-bg);\n    /* letter-spacing: 0.5px; */\n  }\n\n  &:hover div,\n  &:focus div {\n    transform: translateY(0);\n    opacity: 1;\n  }\n`;\n\nconst MovieTitleWrapper = styled.div`\n  /* word-wrap: break-word; */\n  text-overflow: ellipsis;\n  /* white-space: nowrap; */\n  overflow: hidden;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--accent);\n  padding: 5px;\n  height: 30%;\n  transform: translateY(30%);\n  opacity: 0;\n  /* background-color: $primary-accent-color; */\n  transition: transform 250ms ease-in-out, opacity 250ms ease-in-out;\n  text-align: center;\n  /* padding: 26px 0; */\n  /* text-transform: uppercase; */\n`;\n\nconst MovieTitle = styled.p`\n  display: inline-block;\n  /* height: 50px; */\n  /* white-space: nowrap; */\n  word-wrap: break-word;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  max-height: 3em; /* Встановлюємо максимальну висоту на три рядки */\n  line-height: 1em;\n  /* Встановлюємо висоту лінії тексту на один рядок */\n  overflow: hidden;\n`;\n\n// .card-overlay {\n\n// }\n\n// .category-books__link:hover .card-overlay {\n//     transform: translateY(0);\n//     opacity: 1;\n// }\n\n// const Poster = styled.img``;\nexport { List, MovieItem, MovieLink, MovieTitleWrapper, MovieTitle };\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  List,\n  MovieItem,\n  MovieLink,\n  MovieTitle,\n  MovieTitleWrapper,\n} from './MovieList.styled';\nimport what from '../../images/what.jpg';\n\nfunction MoviesList({ movies }) {\n  // console.log(movies);\n  const location = useLocation();\n  // const bestMovie = movies[0];\n  // const restMovies = [...movies.slice(1)];\n  // console.log(bestMovie);\n  // console.log(restMovies);\n\n  return (\n    <>\n      <List>\n        {movies.map(\n          ({ id, title, poster_path }) =>\n            title && (\n              <MovieItem key={id}>\n                <MovieLink\n                  key={id}\n                  to={`/movies/${id}`}\n                  state={{ from: location }}\n                >\n                  <img\n                    // src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                    src={\n                      poster_path\n                        ? 'https://image.tmdb.org/t/p/w300' + poster_path\n                        : what\n                    }\n                    alt={title}\n                    width={150}\n                    height={225}\n                  />\n                  <MovieTitleWrapper>\n                    <MovieTitle>{title}</MovieTitle>\n                  </MovieTitleWrapper>\n                </MovieLink>\n              </MovieItem>\n            )\n        )}\n      </List>\n    </>\n  );\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\nexport default MoviesList;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNWIwYzYzN2RhYzFmZmFlMThjZDRmYmRjMjc1ZWFhOSIsInN1YiI6IjY0OTVjMzgzZDVmZmNiMDBlMjA1NzIzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.x9lPMVl4nfFlN901y3yy6-AcoB6SAlcKg0T-FQPITKg',\n  },\n};\n\nasync function fetchTrendingMovies() {\n  const response = await axios.get('/trending/all/day?language=en-US', options);\n  return response.data.results;\n}\n\nasync function fetchMovieSearch(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&language=en-US`,\n    options\n  );\n  return response.data.results;\n}\nasync function fetchMovieDetails(id) {\n  const response = await axios.get(`/movie/${id}?language=en-US`, options);\n  return response.data;\n}\n\nasync function fetchAddition(id, param) {\n  const response = await axios.get(\n    `movie/${id}/${param}?language=en-US`,\n    options\n  );\n  return response.data;\n}\n\nexport {\n  fetchTrendingMovies,\n  fetchMovieSearch,\n  fetchMovieDetails,\n  fetchAddition,\n};\n","const { Bg } = require('./Background.styled');\n\nfunction Background({ movie }) {\n  return (\n    // <Wrapper>\n    movie && (\n      <Bg\n        bg={`https://image.tmdb.org/t/p/w300/${movie.backdrop_path}`}\n        alt={movie.title}\n        //   width={`100%`}\n      />\n    )\n    //   {children}\n    // </Wrapper>\n  );\n}\n\nexport default Background;\n","import styled from '@emotion/styled';\n\nconst Htag = styled.h1`\n  text-align: center;\n`;\n\nexport { Htag };\n","import { Htag } from './Title.styled';\n\nfunction Title({ children }) {\n  return <Htag>{children}</Htag>;\n}\n\nexport default Title;\n","import MoviesList from 'components/MoviesList/MoviesList';\nimport { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from 'helpers/api';\n// import BestMovie from 'components/BestMovies/BestMovies';\nimport Background from 'components/Background/Background';\nimport Title from 'components/Title/Title';\n\nfunction Home() {\n  const [movies, setMovies] = useState([]);\n  const [bestMovie, setBestMovie] = useState({});\n\n  // const movie = movies[0];\n\n  useEffect(() => {\n    fetchTrendingMovies().then(res => {\n      // console.log(res);\n      const allMovies = res.filter(m => m.title);\n      setMovies(allMovies);\n      setBestMovie(allMovies[0]);\n    });\n  }, []);\n\n  useEffect(() => {\n    setMovies(movies);\n  }, [movies]);\n\n  return (\n    // movies && (\n    <>\n      {bestMovie && <Background movie={bestMovie} />}\n      {/* <BestMovie movies={movies} /> */}\n      <Title>Trending today</Title>\n\n      <MoviesList movies={movies} />\n      {/* </Background> */}\n    </>\n  );\n  // );\n}\n\nexport default Home;\n"],"names":["Wrapper","styled","Bg","props","bg","List","MovieItem","MovieLink","Link","MovieTitleWrapper","MovieTitle","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","what","alt","width","height","axios","options","method","headers","accept","Authorization","fetchTrendingMovies","response","data","results","fetchMovieSearch","query","fetchMovieDetails","fetchAddition","param","require","movie","backdrop_path","Htag","children","useState","setMovies","bestMovie","setBestMovie","useEffect","then","res","allMovies","filter","m","MoviesList"],"sourceRoot":""}