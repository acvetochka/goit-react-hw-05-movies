{"version":3,"file":"static/js/373.b741c9ae.chunk.js","mappings":"kTAEMA,EAAWC,EAAAA,EAAAA,GAAH,0HAQRC,EAAWD,EAAAA,EAAAA,GAAH,uRAURE,EAAWF,EAAAA,EAAAA,IAAH,iEAIRG,EAAOH,EAAAA,EAAAA,EAAH,qE,SCmBV,MArCA,WACE,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAQA,OAPAC,EAAAA,EAAAA,YAAU,WACHL,IACLM,EAAAA,EAAAA,GAAUN,GACPO,MAAK,SAAAC,GAAG,OAAIJ,GAAQ,OAAII,GAAhB,IACRC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GACb,GAAE,CAACV,KAGF,0BACE,SAACL,EAAD,UACGQ,GACCA,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACP,UAACpB,EAAD,YACE,gBACEqB,IACEH,EACI,kCAAoCA,EACpCI,EAENC,MAAM,KACNC,OAAO,MACPC,IAAKN,KAEP,UAAClB,EAAD,YACE,SAACC,EAAD,UAAOiB,IACNC,IAAa,uBAAIA,SAbPH,EADR,OAqBlB,C,8LCvCDS,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NALN,SASeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACyBN,EAAAA,EAAAA,IAAU,mCAAoCC,GADvE,cACQM,EADR,yBAESA,EAASC,KAAKC,SAFvB,2EAKeC,EAAiB,GAAjBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCC,GAAhC,uFACyBX,EAAAA,EAAAA,IAAA,8BACEW,EADF,mBAErBV,GAHJ,cACQM,EADR,yBAKSA,EAASC,KAAKC,SALvB,2EAOeG,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCrB,GAAjC,uFACyBS,EAAAA,EAAAA,IAAA,iBAAoBT,EAApB,mBAAyCU,GADlE,cACQM,EADR,yBAGSA,EAASC,MAHlB,2EAMezB,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBQ,GAAzB,uFACyBS,EAAAA,EAAAA,IAAA,gBACZT,EADY,2BAErBU,GAHJ,cACQM,EADR,yBAKSA,EAASC,KAAK5B,MALvB,2EAQeiC,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BtB,GAA3B,uFACyBS,EAAAA,EAAAA,IAAA,gBACZT,EADY,2BAErBU,GAHJ,cACQM,EADR,yBAKSA,EAASC,KAAKC,SALvB,kE","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","helpers/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  justify-content: center;\n  padding: 20px;\n`;\n\nconst CastItem = styled.li`\n  display: flex;\n  width: calc((100% - 60px) / 5);\n  min-width: 175px;\n  font-size: 14px;\n  background-color: #f2eee6;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nconst CastText = styled.div`\n  padding: 10px;\n  font-style: italic;\n`;\nconst Name = styled.p`\n  font-weight: bold;\n  font-style: normal;\n`;\n\nexport { CastList, CastItem, CastText, Name };\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'helpers/api';\nimport photo from './photo.jpg';\nimport { CastList, CastItem, CastText, Name } from './Cast.styled';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    if (!movieId) return;\n    fetchCast(movieId)\n      .then(res => setCast([...res]))\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  return (\n    <div>\n      <CastList>\n        {cast &&\n          cast.map(({ id, profile_path, name, character }) => (\n            <CastItem key={id}>\n              <img\n                src={\n                  profile_path\n                    ? 'https://image.tmdb.org/t/p/w300' + profile_path\n                    : photo\n                }\n                width=\"80\"\n                height=\"120\"\n                alt={name}\n              />\n              <CastText>\n                <Name>{name}</Name>\n                {character && <p>{character}</p>}\n              </CastText>\n            </CastItem>\n          ))}\n      </CastList>\n    </div>\n  );\n}\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNWIwYzYzN2RhYzFmZmFlMThjZDRmYmRjMjc1ZWFhOSIsInN1YiI6IjY0OTVjMzgzZDVmZmNiMDBlMjA1NzIzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.x9lPMVl4nfFlN901y3yy6-AcoB6SAlcKg0T-FQPITKg',\n  },\n};\n\nasync function fetchTrendingMovies() {\n  const response = await axios.get('/trending/all/day?language=en-US', options);\n  return response.data.results;\n}\n\nasync function fetchMovieSearch(query) {\n  const response = await axios.get(\n    `/search/movie?query=${query}&language=en-US`,\n    options\n  );\n  return response.data.results;\n}\nasync function fetchMovieDetails(id) {\n  const response = await axios.get(`/movie/${id}?language=en-US`, options);\n  //   console.log(response.data);\n  return response.data;\n}\n\nasync function fetchCast(id) {\n  const response = await axios.get(\n    `movie/${id}/credits?language=en-US`,\n    options\n  );\n  return response.data.cast;\n}\n\nasync function fetchReview(id) {\n  const response = await axios.get(\n    `movie/${id}/reviews?language=en-US`,\n    options\n  );\n  return response.data.results;\n}\n\nexport {\n  fetchTrendingMovies,\n  fetchMovieSearch,\n  fetchMovieDetails,\n  fetchCast,\n  fetchReview,\n};\n"],"names":["CastList","styled","CastItem","CastText","Name","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","then","res","catch","err","console","log","map","id","profile_path","name","character","src","photo","width","height","alt","axios","options","method","headers","accept","Authorization","fetchTrendingMovies","response","data","results","fetchMovieSearch","query","fetchMovieDetails","fetchReview"],"sourceRoot":""}